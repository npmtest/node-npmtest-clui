{"/home/travis/build/npmtest/node-npmtest-clui/test.js":"/* istanbul instrument in package npmtest_clui */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-clui/lib.npmtest_clui.js":"/* istanbul instrument in package npmtest_clui */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_clui = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_clui = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-clui/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-clui && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_clui */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_clui\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_clui.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_clui.rollup.js'] =\n            local.assetsDict['/assets.npmtest_clui.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_clui.__dirname + '/lib.npmtest_clui.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-clui/node_modules/clui/lib/clui.js":"var clc      = require('cli-color'),\n    ansiTrim = require('cli-color/trim'),\n    sprintf  = require('util').format;\n\nvar sparklineSymbols = [\n  '\\u2581',\n  '\\u2582',\n  '\\u2583',\n  '\\u2584',\n  '\\u2585',\n  '\\u2586',\n  '\\u2587',\n  '\\u2588'\n];\n\n// Tiny helper function used for making default values prettier.\nfunction pick(value, defaultValue) {\n return (typeof value == 'undefined' ? defaultValue : value);\n}\n\nvar helpers = {\n\n  // Make a console spinner.\n  // Code based on code from Mocha by Visionmedia/Tj\n  // https://github.com/visionmedia/mocha/blob/master/bin/_mocha\n  Spinner: function (message) {\n    var spinnerMessage = message;\n\n    this.start = function () {\n      var self = this;\n      var spinner = 'win32' == process.platform ? ['|','/','-','\\\\'] : ['◜','◠','◝','◞','◡','◟'];\n\n      function play(arr, interval) {\n        var len = arr.length, i = 0;\n        interval = interval || 100;\n\n        var drawTick = function () {\n          var str = arr[i++ % len];\n          process.stdout.write('\\u001b[0G' + str + '\\u001b[90m' + spinnerMessage + '\\u001b[0m');\n        };\n\n        self.timer = setInterval(drawTick, interval);\n      }\n\n      var frames = spinner.map(function(c) {\n        return sprintf('  \\u001b[96m%s ', c);\n      });\n\n      play(frames, 70);\n    };\n\n    this.message = function (message) {\n      spinnerMessage = message;\n    };\n\n    this.stop = function () {\n      process.stdout.write('\\u001b[0G\\u001b[2K');\n      clearInterval(this.timer);\n    };\n  },\n\n  // Make an ascii horizontal gauge\n  Gauge: function (value, maxValue, width, dangerZone, suffix) {\n    if(maxValue === 0)\n    {\n      return '[]';\n    }\n    else\n    {\n      var barLength = Math.ceil(value/maxValue*width);\n      if(barLength > width)\n        barLength = width;\n\n      var barColor = clc.green;\n      if(value > dangerZone)\n        barColor = clc.red;\n\n      return '['+\n        barColor(Array(barLength).join(\"|\")) +  //The filled portion\n        Array(width+1-barLength).join(\"-\") +    //The empty portion\n      '] ' + clc.blackBright(suffix);\n    }\n  },\n\n  // Make a progress bar\n  Progress: function (width) {\n    var currentValue = 0;\n    var maxValue = 0;\n    var self = this;\n\n    this.update = function (currentValue, maxValue) {\n      if(maxValue === 0)\n      {\n        return '[]';\n      }\n      else\n      {\n        var barLength = Math.ceil(currentValue / maxValue * width);\n        if(barLength > width)\n          barLength = width;\n\n        return '['+\n          clc.green(Array(barLength).join(\"|\")) +  //The filled portion\n          Array(width + 1 - barLength).join(\"-\") +    //The empty portion\n        '] ' + clc.blackBright(Math.ceil(currentValue / maxValue * 100) + '%');\n      }\n    };\n  },\n\n  // Make a unicode sparkline chart\n  Sparkline: function (points, suffix) {\n    if(typeof suffix == 'undefined')\n      suffix = '';\n\n    var max = Math.max.apply(Math, points);\n\n    var scaledSequence = points.map(function (thisPoint) {\n      if(max === 0)\n        return [0, 0];\n      else if(thisPoint === 0)\n        return [0, 0];\n      else\n        return [\n          Math.ceil(thisPoint / max * (sparklineSymbols.length-1)),\n          thisPoint\n        ];\n    });\n\n    var sparklineGraph = '';\n    var alreadyDrawnMax = false;\n    scaledSequence.forEach(function (symbolNumber) {\n      if(symbolNumber[1] == max & !alreadyDrawnMax)\n      {\n        sparklineGraph += clc.green(sparklineSymbols[symbolNumber[0]]);\n        alreadyDrawnMax = true;\n      }\n      else\n        sparklineGraph += sparklineSymbols[symbolNumber[0]];\n    });\n\n    return sparklineGraph + '  ' + clc.blackBright(points[points.length-1] + suffix + ' (') + clc.green(max + suffix) + clc.blackBright(')');\n  },\n\n  // Interface for storing multiple lines and then outputting them all at once.\n  LineBuffer: function (userOptions) {\n    var self = this;\n    self.lines = [];\n\n    //Merge the user defined settings (if there are any) with the default settings.\n    var defaultOptions = {\n      x: 0,\n      y: 0,\n      width: 'console',\n      height: 'console',\n      scroll: 0\n    };\n\n    if(typeof userOptions == 'undefined')\n      self.userOptions = defaultOptions;\n    else\n    {\n      self.userOptions = {\n        x: pick(userOptions.x, defaultOptions.x),\n        y: pick(userOptions.y, defaultOptions.y),\n        width: pick(userOptions.width, defaultOptions.width),\n        height: pick(userOptions.height, defaultOptions.height),\n        scroll: pick(userOptions.scroll, defaultOptions.scroll)\n      };\n    }\n\n    this.height = function ()\n    {\n      if(self.userOptions.height == 'console')\n        return process.stdout.rows;\n      else\n        return self.userOptions.height;\n    };\n\n    this.width = function ()\n    {\n      if(self.userOptions.width == 'console')\n        return process.stdout.columns;\n      else\n        return self.userOptions.width;\n    };\n\n    // Push a line of content into the buffer.\n    this.addLine = function (lineObject) {\n      self.lines.push(lineObject);\n      return self;\n    };\n\n    // See if the buffer has enough content to fill the vertical space, if not fill the vertical space\n    // with the designated fill line.\n    this.fill = function (fillLine) {\n      var fillHeight = self.height()-self.lines.length;\n      if(fillHeight > 0)\n      {\n        for(var i = 0; i < fillHeight; i++)\n        {\n          self.addLine(fillLine);\n        }\n      }\n      return self;\n    };\n\n    // Output a buffer full of lines.\n    this.output = function () {\n      // First grab a subset of the lines depending on the scroll location and the height of the buffer.\n      var outputLines;\n      var sliceEnd;\n      var outputHeight = self.height();\n      if(self.userOptions.scroll > self.lines.length)\n        return;\n\n      if(self.lines.length - self.userOptions.scroll > outputHeight)\n        outputLines = self.lines.slice(self.userOptions.scroll, self.userOptions.scroll + outputHeight);\n      else\n        outputLines = self.lines.slice(self.userOptions.scroll);\n\n      // First move the cursor to the location where we want the buffer to draw.\n      var currentY = self.userOptions.y;\n      outputLines.forEach(function (line) {\n        process.stdout.write(clc.moveTo(self.userOptions.x, currentY));\n        line.output();\n        currentY++;\n      });\n    };\n  },\n\n  // Create a new table object to output\n  Table: function () {\n    var self = this;\n    var tableContent = '';\n\n    // Adds a new table row to the output\n    self.tr = function () {\n      return self;\n    };\n\n    // Adds a new table cell to the output\n    self.td = function (cellContent, cellWidth) {\n      return self;\n    };\n\n    // Draw this table to the screen\n    self.output = function () {\n      return self;\n    };\n\n    return self;\n  },\n\n  // Chainable wrapper for line content\n  Line: function (defaultBuffer) {\n    var lineContent = \"\";\n    var self = this;\n    self.defaultBuffer = defaultBuffer;\n\n    // Put text in the line\n    this.text = function (text, styles) {\n      for(var styleNumber in styles)\n      {\n        text = styles[styleNumber](text);\n      }\n      lineContent += text;\n      return self;\n    };\n\n    // Put padding in the line.\n    this.padding = function (width, styles) {\n      var padding = Array(width+1).join(\" \");\n      for(var styleNumber in styles)\n      {\n        padding = styles[styleNumber](padding);\n      }\n      lineContent += padding;\n      return self;\n    };\n\n    // Put padding in the line.\n    this.column = function (text, columnWidth, textStyles) {\n      var textWidth = ansiTrim(text).length;\n\n      if(textWidth > columnWidth)\n      {\n        self.text(text.slice(0, columnWidth), textStyles);\n      }\n      else if(textWidth < columnWidth)\n      {\n        self.text(text, textStyles)\n            .padding(columnWidth - textWidth);\n      }\n      else\n      {\n        self.text(text, textStyles);\n      }\n      return self;\n    };\n\n    // Fill the rest of the width of the line with space.\n    this.fill = function (styles) {\n      var fillWidth = process.stdout.columns-ansiTrim(lineContent).length;\n      if(fillWidth > 0)\n        self.padding(fillWidth, styles);\n      return self;\n    };\n\n    // Store a line in a line buffer to be output later.\n    this.store = function (buffer) {\n      if(typeof buffer == 'undefined')\n      {\n        if(typeof self.defaultBuffer == 'undefined')\n          process.stderr.write('Attempt to store a line in a line buffer, without providing a line buffer to store that line in.');\n        else\n          self.defaultBuffer.addLine(self);\n      }\n      else\n      {\n        buffer.addLine(self);\n      }\n      return self;\n    };\n\n    // Output a line directly to the screen.\n    this.output = function () {\n      process.stdout.write(lineContent+\"\\n\");\n      return self;\n    };\n    \n    // Return the contents\n    this.contents = function () {\n      return lineContent;\n    };\n  }\n};\n\nmodule.exports = helpers;\n"}